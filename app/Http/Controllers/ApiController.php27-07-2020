<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Str;
use App\Models\Users;
use App\Models\Stages;
use App\Models\IndustryCategories;
use App\Models\Categories;
use App\Models\EmailTemplate;
use App\Models\MemberBusiness;
use App\Models\PostIndustry;
use App\Models\Posts;
use App\Models\PostReply;
use App\Models\PostCategory;
use App\Models\PostMedia;
use App\Models\FounderTransaction;
use App\Models\MemberService;
use App\Models\MemberVideo;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use Image;
use Auth;
use DB;
use Session;
use PHPMailer\PHPMailer\PHPMailer;
use Carbon\Carbon;
use Validator;
use Mail;
//use File;

class ApiController extends Controller {

    public function __construct() {
        $lang = Session::get('variableLocale');
        if ($lang != null) {
            Session::put('variableLocale', 'en');
            \App::setLocale($lang);
        }
    }
	
	public function getIndustryCategory(Request $request) {

        $records = array();

        $result = IndustryCategories::select('id','industry_category')
                        ->where('status', '=', '1')
                        ->orderBy('industry_category', 'asc')->get();

        $records["details"] = $result;
        $records["message"] = "successful";
        $records["success"] = true;
        $records["success_bool"] = 1;

        echo json_encode($records);
    }

    public function getCategory(Request $request) {

        $records = array();

        $result = Categories::select('id','name')
                        ->where('status', '=', '1')
                        ->orderBy('name', 'asc')->get();

        $records["details"] = $result;
        $records["message"] = "successful";
        $records["success"] = true;
        $records["success_bool"] = 1;

        echo json_encode($records);
    }



    public function getAllPosts(Request $request) {
        $records = array();
        $user= array();
        $timestamp_id = $request->input('timestamp_id');
        if(!empty($timestamp_id)){
        $industry_type = $request->input('industry_type');
        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
        $memberBusiness = MemberBusiness::where('member_id', '=', $user->id)->pluck('industry_category_id')->toArray();

        $memberCategory = PostCategory::where('member_id', '=', $user->id)->pluck('category_id')->toArray();

        //$memberBusinessStr = implode(',', $memberBusiness);
        //echo $memberBusinessStr; exit;
        #dd($memberBusiness);
        $result = array();
        if(!empty($user->id)){
            $uid= $user->id;
            //echo $user->id; exit;
                   if($industry_type == '1'){


        		    




                        $result = DB::table('post_master')
                            ->select('post_master.*')
                             ->join('post_industry', 'post_master.id', '=', 'post_industry.post_id')
                             ->leftJoin('post_categories', 'post_master.id', '=', 'post_categories.post_id')
                        ->where(function ($query)  use($uid,$memberBusiness) {
                        $query->where('post_master.private_member_id', '=', $uid)
                            ->whereIn('post_industry.industry_category_id', $memberBusiness)
                            ->where('post_master.post_type', '=', '2')
                            ->where('post_master.status', '=', '1');
                        })->orWhere(function($query) use($memberBusiness){
                            $query->where('post_master.status', '=', '1')
                                ->whereIn('post_industry.industry_category_id', $memberBusiness)
                                ->where('post_master.post_type', '=', '1');   
                        })
                         ->groupBy('post_master.id')
                        ->orderBy('post_master.id', 'desc')->get();
                    }else{
                        $result = DB::table('post_master')
                            ->select('post_master.*')
                            ->join('post_industry', 'post_master.id', '=', 'post_industry.post_id')
                            ->leftJoin('post_categories', 'post_master.id', '=', 'post_categories.post_id')
                        ->where(function ($query)  use($uid) {
                        $query->where('post_master.private_member_id', '=', $uid)
                            ->where('post_master.post_type', '=', '2')
                            ->where('post_master.status', '=', '1');
                        })->orWhere(function($query){
                            $query->where('post_master.status', '=', '1')
                                ->where('post_master.post_type', '=', '1');   
                        })
                        ->groupBy('post_master.id')
                        ->orderBy('post_master.id', 'desc')->get();
                    }
        
                //dd($result);

        if(!empty($result)){
        	$i=0;
        	foreach($result as $r){
        		$postDiv = html_entity_decode($r->post_info);

                $result[$i]->post = '<div style="line-height:3;">'.$postDiv.'<div>';

        		$postReply = PostReply::where('post_id', '=', $r->id)->count();
        		$userCom = Users::where('id', '=', $r->member_id)->first();
        		$result[$i]->replyCount = $postReply;
                if(!empty($userCom->member_company)){
        		$result[$i]->member_company = $userCom->member_company;
                }else{
                    $result[$i]->member_company = '';
                }

        		// echo  $r->member_id."____".$userCom->stage_id;

        		// exit;
        		$stageArr = Stages::where('id', '=', $userCom->stage_id)->first();
                if(!empty($stageArr)){
        		$result[$i]->stage = $stageArr->stage_name;
                }else{
                  $result[$i]->stage = '';  
                }




        		$result[$i]->posted_user_image = 'public/uploads/user_images/original/'.$userCom->image;
                $result[$i]->timestamp_id = $userCom->timestamp_id;
        		$result[$i]->posted_by = $userCom->contact_name;
        		$result[$i]->posted_at = date('d M, Y', strtotime($r->created_at));
        		//$result[$i]->posted_at = str_replace('-', '/', $result[$i]->posted_at);
        		if($r->post_type =='1'){
        			$result[$i]->post_type = 'Public';
        			$result[$i]->assign_to = "";
        		}else{
        			$result[$i]->post_type = 'Private';
        			$userAssign = array();
        			$userAssign = Users::where('id', '=', $r->private_member_id)->first();


        			$result[$i]->assign_to = $userAssign->contact_name;
        		}





        		$result[$i]->memberBusiness= DB::table('member_business')
				->select('industry_category_id', 'industry_category','industry_category.id')
				 ->join('industry_category', 'member_business.industry_category_id', '=', 'industry_category.id')
				 ->where("industry_category.status", "=", 1)
				 ->where("member_id", "=", $userCom->id)->get();


                 $result[$i]->postIndustry= DB::table('post_industry')
                ->select('industry_category_id', 'industry_category')
                 ->join('industry_category', 'post_industry.industry_category_id', '=', 'industry_category.id')
                 ->where("industry_category.status", "=", 1)
                 ->where("post_id", "=", $r->id)->get();


                 if(!empty($r->category_id))
                 {
                    $result[$i]->postCategory= DB::table('post_categories')
                    ->select('category_id', 'name')
                     ->join('categories', 'post_categories.category_id', '=', 'categories.id')
                     ->where("categories.status", "=", 1)
                     ->where("post_id", "=", $r->id)->get();
                 }


                 




        		$i++;
        	}
        }            
        //dd($result);
        $records["details"] = $result;
        $records["message"] = "successful";
        $records["success"] = true;
        $records["success_bool"] = 1;

        echo json_encode($records);
    }else{
            $records["details"] = array();
            $records["message"] = "User id wrong";
            $records["success"] = false;
            $records["success_bool"] = 1;

            echo json_encode($records);
    }
}else{
            $records["details"] = array();
            $records["message"] = "User id require";
            $records["success"] = false;
            $records["success_bool"] = 1;

            echo json_encode($records);
}

        
    }


    public function getPostDetl(Request $request) {

        $records = array();

        $timestamp_id = $request->input('timestamp_id');
        $post_id = $request->input('post_id'); 

        if(!empty($post_id)){
        if(!empty($timestamp_id)){
        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
    	}
        $result = Posts::select('*')
                        ->where('status', '=', '1')
                        ->where('id', '=', $post_id)->first();
                        
        $postReply = PostReply::where('post_id', '=', $post_id)->count();


        $userCom = Users::where('id', '=', $result->member_id)->first();

        //dd($userCom);
        // echo $userCom->contact_name; 
        // exit;
        $result->replyCount = $postReply;

        $postDiv = html_entity_decode($result->post_info);

        $result->post = '<div style="line-height:3;">'.$postDiv.'<div>';

        $result->member_company = $userCom->member_company;
        $result->posted_user_image = 'public/uploads/user_images/original/'.$userCom->image;
        $result->posted_by = $userCom->contact_name;
        $result->posted_at = date('d M, Y', strtotime($result->created_at));
        //$result->posted_at = str_replace('-', '/', $result->posted_at);
        if($result->post_type =='1'){
        	$result->post_type = 'Public';
        	$result->assign_to = "";
        }else{
        	$result->post_type = 'Private';
        	$userAssign = array();
        	$userAssign = Users::where('id', '=', $result->private_member_id)->first();
            //dd($userAssign);
            if(!empty($userAssign->contact_name)){
        	$result->assign_to = $userAssign->contact_name;
                }else{
                   $result->assign_to = ""; 
                }
        	}

        
        $result->postIndustry= DB::table('post_industry')
                ->select('industry_category_id', 'industry_category')
                 ->join('industry_category', 'post_industry.industry_category_id', '=', 'industry_category.id')
                 ->where("industry_category.status", "=", 1)
                 ->where("post_id", "=", $post_id)->get();




        $result->postCategory= DB::table('post_categories')
                ->select('category_id', 'name')
                 ->join('categories', 'post_categories.category_id', '=', 'categories.id')
                 ->where("categories.status", "=", 1)
                 ->where("post_id", "=", $post_id)->get();

        // $result = PostReply::select('*')
        //            ->where('status', '=', '1')
        //            ->where('post_id', '=', $post_id)
        //            ->orderBy('reply_text', 'asc')->get();
       
                 
        // $result->company=$user->member_company;
        // $result->replied_at=date('d/m/Y h:i', strtotime($user->member_company));
        $result->replyCnt=$postReply;
        //dd($result);  
        $records["details"] = $result;
        $records["message"] = "successful";
        $records["success"] = true;
        $records["success_bool"] = 1;

        echo json_encode($records);
    	}else{
    	$records["details"] = array();
        $records["message"] = "Post id is require";
        $records["success"] = false;
        $records["success_bool"] = 1;

        echo json_encode($records);
    	}

        // dd($result);
        // exit;
       
    }
    

    public function getStartupstage(Request $request) {

        $records = array();

        $result = Stages::select('id','stage_name')
                        //->where('status', '=', '1')
                        ->orderBy('stage_name', 'asc')->get();

        $records["details"] = $result;
        $records["message"] = "successful";
        $records["success"] = true;
        $records["success_bool"] = 1;

        echo json_encode($records);
    }

    
    public function userList(Request $request) {
    	if ($request->isMethod('post')) { 
    		$timestamp_id = $request->input('timestamp_id');

    		if(!empty($timestamp_id)){
    		$result = Users::select('id','contact_name')
                        ->where('status', '=', '1')
                        ->where('user_type', '=', '2')
                        ->where('timestamp_id', '<>', $timestamp_id)
                        ->orderBy('contact_name', 'asc')->get();
            }else{
                    	$result = Users::select('id','contact_name')
                        ->where('status', '=', '1')
                        ->where('user_type', '=', '2')
                        ->orderBy('contact_name', 'asc')->get();
            }

	        $records["details"] = $result;
	        $records["message"] = "successful";
	        $records["success"] = true;
	        $records["success_bool"] = 1;

	        echo json_encode($records);


    	}
    }


    public function getComment(Request $request) {
    	if ($request->isMethod('post')) { 
    		$timestamp_id = $request->input('timestamp_id');
    		$post_id = $request->input('post_id');


            $post = Posts::select('post_title','post_info')
                        ->where('status', '=', '1')
                        ->where('id', '=', $post_id)->first();
            //dd($post);

    		if(!empty($timestamp_id)){
    			$result = PostReply::select('*')
                    ->where('status', '=', '1')
                    ->where('post_id', '=', $post_id)
                    ->where('replied_on', '=', 0)
                    ->orderBy('id', 'desc')
                    ->get();
    		}else{
    			$result = PostReply::select('*')
                    ->where('status', '=', '1')
                    ->where('post_id', '=', $post_id)
                    ->where('replied_on', '=', 0)
                    //->orderBy('id', 'desc')
                    ->get();
    		}

    		if(!empty($result)){
    			$i=0;
    			foreach($result as $r){
                   
                   
    			$commentsUser= Users::where('id', '=', $r->replied_by)->first();	

                $result[$i]->postTitle =$post->post_title;
                $result[$i]->post =html_entity_decode($post->post_info);

	    		$result[$i]->comment_by_name =$commentsUser->contact_name;
                $result[$i]->member_company = $commentsUser->member_company;
                $result[$i]->comment_user_image = 'public/uploads/user_images/original/'.$commentsUser->image;


                $post_images= DB::table('post_medias')
                                ->select('media_path')
                                ->where("post_reply_id", "=",$r->id)
                                 ->where("media_type", "=", 'I')
                                 ->where("status", "=", 1)->get();

                /*$postVideoMatter =array();

                if(!empty($post_images) && count($post_images))
                {
                     foreach($post_images as $key =>$fpv1)
                     {
                            $postVideoMatter[$key] = asset('public/uploads/posts/images/'. $fpv1->media_path);
                     }


                }

                $post_videos= DB::table('post_medias')
                                ->select('media_path')
                                ->where("post_reply_id", "=",$r->id)
                                 ->where("media_type", "=", 'V')
                                 ->where("status", "=", 1)->get();*/

                /*$postVideoMatterVideo =array();

                if(!empty($post_videos) && count($post_videos))
                {
                     foreach($post_videos as $key1 =>$fpi)
                     {
                            $postVideoMatterVideo[$key1] = asset('public/uploads/posts/videos/'. $fpi->media_path);
                     }
                }*/

                $result[$i]->post_images =$postVideoMatter;
                //$result[$i]->post_videos =$postVideoMatterVideo;




                $memberBusiness= DB::table('member_business')
                                ->select('industry_category_id', 'industry_category','industry_category.id')
                                 ->join('industry_category', 'member_business.industry_category_id', '=', 'industry_category.id')
                                 ->where("industry_category.status", "=", 1)
                                 ->where("member_id", "=", $commentsUser->id)->get();

                //dd($r);     
                $comment_reply =array();            
                $comment_reply = PostReply::select('replied_by','reply_text','created_at','video_url','id')
                    ->where('status', '=', '1')
                    ->where('replied_on', '=', $r->id)
                    ->orderBy('id', 'desc')->get();                

                //dd($comment_reply); 

                
                
                //$result[$i]->commentreply =$comment_reply;     
                //$cmtRep =array();   
                if(!empty($comment_reply)){ 
                    //$g='0'; 
                    foreach($comment_reply as $cr){  
                    //echo $g; 


                        $post_images_1= DB::table('post_medias')
                                ->select('media_path')
                                ->where("post_reply_id", "=",$cr->id)
                                 ->where("media_type", "=", 'I')
                                 ->where("status", "=", 1)->get();

                        $postVideoMatter_2 =array();

                        if(!empty($post_images_1) && count($post_images_1))
                        {
                             foreach($post_images_1 as $key =>$fpv2)
                             {
                                    $postVideoMatter_2[$key] = asset('public/uploads/posts/images/'. $fpv2->media_path);
                             }


                        }

                        /*$post_videos_1= DB::table('post_medias')
                                        ->select('media_path')
                                        ->where("post_reply_id", "=",$cr->id)
                                         ->where("media_type", "=", 'V')
                                         ->where("status", "=", 1)->get();

                        $postVideoMatterVideo_2 =array();

                        if(!empty($post_videos_1) && count($post_videos_1))
                        {
                             foreach($post_videos_1 as $key1 =>$fpi_2)
                             {
                                    $postVideoMatterVideo_2[$key1] = asset('public/uploads/posts/videos/'. $fpi_2->media_path);
                             }
                        }*/

                        $cr->post_images =$postVideoMatter;
                        //$cr->video_url =$postVideoMatterVideo;



                       
                    $replyUser= Users::where('id', '=', $cr->replied_by)->first(); 
                    //dd($replyUser);   
                    //echo $replyUser->contact_name;
                    if(!empty($replyUser->contact_name)){
                    $cr->replied_by_contact_name =$replyUser->contact_name;
                    }else{
                     $cr->replied_by_contact_name = "";   
                    } 
                    $cr->replied_member_company =$replyUser->member_company; 
                    $cr->replied_user_image = 'public/uploads/user_images/original/'.$replyUser->image;
                    $cr->replied_at = date('d M, Y', strtotime($cr->created_at));
                    $cr->reply_of_comments = $cr->reply_text;
                    //$g++;
                 }
                }
                //dd($comment_reply);
                $result[$i]->cmtRep =$comment_reply;  
                $result[$i]->industry = $memberBusiness;            

	    		$result[$i]->commented_at = date('d M, Y', strtotime($r->created_at));
        		//$result[$i]->posted_at = str_replace('-', '/', $result[$i]->posted_at);
                $i++;
	    		}

	    		//dd($result);
	    	$records["details"] = $result;
		    $records["message"] = "successful";
		    $records["success"] = true;
		    $records["success_bool"] = 1;
	    
    		}else{
    		$records["details"] = array();
	        $records["message"] = "There are no reply";
	        $records["success"] = false;
	        $records["success_bool"] = 1;		
    		}

    		

	        echo json_encode($records);


    	}
    }



    public function getCommentReply(Request $request) {
    	if ($request->isMethod('post')) { 
    		$timestamp_id = $request->input('timestamp_id');
    		//$post_id = $request->input('post_id');
    		$comment_id = $request->input('comment_id');

    		if(!empty($timestamp_id)){
    			$result = PostReply::select('*')
                    ->where('status', '=', '1')
                    ->where('replied_on', '=', $comment_id)
                    ->orderBy('id', 'desc')->get();
    		}else{
    			$result = PostReply::select('*')
                    ->where('status', '=', '1')
                    ->where('replied_on', '=', $comment_id)
                    ->orderBy('id', 'desc')->get();
    		}


    		//dd($result);

    		if(!empty($result)){
    			$i=0;
    			foreach($result as $r){
    			$commentsUser= Users::where('id', '=', $r->replied_by)->first();	
	    		$result[$i]->posted_by_name =$commentsUser->contact_name;

                $result[$i]->member_company = $commentsUser->member_company;
                $result[$i]->comment_user_image = 'public/uploads/user_images/original/'.$commentsUser->image;



                $post_images= DB::table('post_medias')
                                ->select('media_path')
                                ->where("post_reply_id", "=",$r->id)
                                 ->where("media_type", "=", 'I')
                                 ->where("status", "=", 1)->get();

                $postVideoMatter =array();

                if(!empty($post_images) && count($post_images))
                {
                     foreach($post_images as $key =>$fpv1)
                     {
                            $postVideoMatter[$key] = asset('public/uploads/posts/images/'. $fpv1->media_path);
                     }


                }

                /*$post_videos= DB::table('post_medias')
                                ->select('media_path')
                                ->where("post_reply_id", "=",$r->id)
                                 ->where("media_type", "=", 'V')
                                 ->where("status", "=", 1)->get();

                $postVideoMatterVideo =array();

                if(!empty($post_videos) && count($post_videos))
                {
                     foreach($post_videos as $key1 =>$fpi)
                     {
                            $postVideoMatterVideo[$key1] = asset('public/uploads/posts/videos/'. $fpi->media_path);
                     }
                }*/

                $result[$i]->post_images =$postVideoMatter;
                //$result[$i]->post_videos =$postVideoMatterVideo;



                $memberBusiness= DB::table('member_business')
                                ->select('industry_category_id', 'industry_category','industry_category.id')
                                 ->join('industry_category', 'member_business.industry_category_id', '=', 'industry_category.id')
                                 ->where("industry_category.status", "=", 1)
                                 ->where("member_id", "=", $commentsUser->id)->get();



                $result[$i]->industry = $memberBusiness;

	    		$result[$i]->reply_at = date('d M, Y', strtotime($r->created_at));
        		//$result[$i]->posted_at = str_replace('-', '/', $result[$i]->posted_at);
                $i++;
	    		}

	    		//dd($result);
	    	$records["details"] = $result;
		    $records["message"] = "successful";
		    $records["success"] = true;
		    $records["success_bool"] = 1;
	    
    		}else{
    		$records["details"] = array();
	        $records["message"] = "There are no reply";
	        $records["success"] = false;
	        $records["success_bool"] = 1;		
    		}

    		

	        echo json_encode($records);


    	}
    }


    public function loginAction(Request $request) {

        $records = array();
		
        if ($request->isMethod('post')) {        
        
			$arr_ret = array();   	
			
			$email_username = $request->input('email_username');
			$password = md5(trim($request->input('password')));	
			$deviceToken = $request->input('deviceToken');
						
			if (filter_var($email_username, FILTER_VALIDATE_EMAIL)) {
                $user = Users::where('email_id', '=', $email_username)
                        ->where('password', '=', $password)
                        ->where('status', '1')
                        //->where('user_type', '5')
                        ->first();


                if (!empty($user)) {

                    Auth::login($user);
                    //echo Auth::user()->email_id;die;                    
                    
					$user_id = Auth::user()->id;
					$current_login = Auth::user()->current_login;

					$update_data = array(
						'current_login' => date('Y-m-d H:i:s'),
						'last_login' => $current_login,
						'deviceToken' => $deviceToken,
					);
					$userDetails = Users::find($user_id);
					//dd($update_data);
					//$userDetails->update($update_data);

					$res = Users::where('id', '=', $user_id)->update($update_data);

					$userDetails->img_with_path = "public/uploads/user_images/original/".$userDetails->image;
					

					//dd($userDetails);
					$records["details"] = "Login successful";
					$records["userDetails"] = $userDetails;
					$records["error"] = '';    
					$records["message"] = "successful";
					$records["success"] = true;
					$records["success_bool"] = 1;
					
                    
                } else {
                    
					$records["details"] = "Invalid Credentials";
					$records["error"] = '';
					$records["message"] = "failed";
					$records["success"] = false;
					$records["success_bool"] = 1;
					
                }
            } else {
                $user = Users::where('username', '=', $email_username)
                        ->where('password', '=', $password)
                        ->where('status', '1')
                        ->where('user_type', '2')
                        ->first();

                if (!empty($user)) {

                    Auth::login($user);
                    //echo Auth::user()->username;die;					
					
					$user_id = Auth::user()->id;
					$current_login = Auth::user()->current_login;

					$update_data = array(
						'current_login' => date('Y-m-d H:i:s'),
						'last_login' => $current_login,
						'deviceToken' => $deviceToken,
					);
					$userDetails = Users::find($user_id);
					//$userDetails->update($update_data);
					$res = Users::where('id', '=', $user_id)->update($update_data);
										
					$userDetails->img_with_path = "public/uploads/user_images/original/".$userDetails->image;
					

					//dd($userDetails);					
                    $records["details"] = "Login successful";
					$records["userDetails"] = $userDetails;
					$records["error"] = '';    
					$records["message"] = "successful";
					$records["success"] = true;
					$records["success_bool"] = 1;
                    
                    
                } else {
					
					$records["details"] = "Invalid Credentials";
					$records["error"] = '';
					$records["message"] = "failed";
					$records["success"] = false;
					$records["success_bool"] = 1;
                    
                }
            }
			
			
		}else{
			
			$records["details"] = "Login failed";
            $records["error"] = '';
            $records["message"] = "failed";
            $records["success"] = false;
            $records["success_bool"] = 1;
			
		}

        echo json_encode($records);
    }
	
	public function logoutAction(Request $request) {

        $records = array();
		
        if ($request->isMethod('post')) {        
        
			$arr_ret = array();   	
			
			$id = $request->input('user_id');   
                
			$update_data = array(
				'deviceToken' => '',
			);
			$userDetails = Users::find($id);
			//dd($userDetails);
			//$userDetails->update($update_data);
			$res = Users::where('id', '=', $id)->update($update_data);

			$records["details"] = "Logout successful";			
			$records["error"] = '';    
			$records["message"] = "successful";
			$records["success"] = true;
			$records["success_bool"] = 1;                   
               
			
		}else{
			
			$records["details"] = "Logout failed";
            $records["error"] = '';
            $records["message"] = "failed";
            $records["success"] = false;
            $records["success_bool"] = 1;
			
		}

        echo json_encode($records);
    }

    

   
 
		

    public function resetPassword(Request $request){
    		$email_id = $request->input('email_id');

    		$user = Users::where('email_id', '=', $email_id)->first();
    		$permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    		$strength='8';

    		$input_length = 8;
		    $random_string = '';
		    for($i = 0; $i < $strength; $i++) {
		        $random_character = $permitted_chars[mt_rand(0, $input_length - 1)];
		        $random_string .= $random_character;
		    }

    		$password = $random_string;
    		
        	$records = array();

        	if(!empty($user)){
        	

			

	        	$template_data = EmailTemplate::where('id', '=', '2')->first();
				//dd($template_data);
				$content = $template_data->description;

				
				$content = str_replace("{{email}}", $email_id, $content);
				$content = str_replace("{{username}}", $user->contact_name, $content);
				$content = str_replace("{{password}}", $password, $content);
				//$content = str_replace("{{link}}", $url, $content);



	   //      	$emailData = array();
				// $emailData['subject'] = 'Reset Password';
				// $emailData['body'] = $content;
				// $emailData['to_email'] = $email_id;
				// $emailData['from_email'] ='admin@iimcip.com';
				// $emailData['from_name'] = 'IIMCIP';
				//echo "<pre>"; print_r($emailData); die;

				// Mail::send('emails.accountVerification', ['emailData' => $emailData], function ($message) use ($emailData) {

				// 	$message->from($emailData['from_email'], $emailData['from_name']);

				// 	$message->to($emailData['to_email'])->subject($emailData['subject']);
				// 	$message->bcc('karmickdeveloper77@gmail.com')->subject($emailData['subject']);
					
				// });

				$headers = "MIME-Version: 1.0" . "\r\n";
				$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";

				// More headers
				$headers .= 'From: <admin@iimcip.com>' . "\r\n";
				$headers .= 'Cc: karmickdeveloper77@gmail.com' . "\r\n";

				mail($email_id,'Reset Password',$content,$headers);

				$update_data = array(
						'password' => md5($password),
					);
				$res = Users::where('id', '=', $user->id)->update($update_data);
				$records["details"] = array();
		        $records["message"] = "successful";
		        $records["success"] = true;
		        $records["success_bool"] = 1;
            }
            else{
            $records["details"] = array();
	        $records["message"] = "Email id does not match";
	        $records["success"] = false;
	        $records["success_bool"] = 1;
            }

	        

	        echo json_encode($records);

    }



    public function saveUser(Request $request) {
    	$records = array();
  //   	$request->validate([
			
  //           'email_id' => 'required|email|unique:users,email_id'
		// ],[
		
		// 	'email_id.unique' => 'This Email-id Already Exist, Try Another.'
		// ]);
    	$email = trim($request->input('email_id'));

    	$UserWithEmail = Users::where('email_id', '=', $email)->first();

    		
    		if(!empty($UserWithEmail)){

    			$records["details"] = array();
		        $records["message"] = "Email already exist";
		        $records["success"] = false;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
		        exit;
    		}else{

    	$Users = new Users;
    	$Users->timestamp_id = md5(microtime(TRUE));
    	$Users->member_company = trim($request->input('member_company'));
    	$Users->contact_name = trim($request->input('contact_name'));
    	$Users->email_id = trim($request->input('email_id'));
    	$Users->contact_no = trim($request->input('contact_no'));
    	$Users->password = md5(trim($request->input('password')));
        $Users->user_type = 2;


        if( $request->hasFile('image') ) {

                $image = $request->file('image');
                $real_path = $image->getRealPath();
                $file_orgname = $image->getClientOriginalName();
                $file_size = $image->getClientSize();
                $file_ext = strtolower($image->getClientOriginalExtension());
                $file_newname = "user"."_".time().".".$file_ext;


                if($file_size < (1048578*5)){
                $destinationPath = public_path('/uploads/user_images');
                $original_path = $destinationPath."/original";
                $thumb_path = $destinationPath."/thumb";
                
                $img = Image::make($real_path);
                $img->resize(150, 150, function ($constraint) {
                    $constraint->aspectRatio();
                })->save($thumb_path.'/'.$file_newname);

                $image->move($original_path, $file_newname);
                

                $Users->image = $file_newname;

                }else{
	          	$records["details"] = array();
		        $records["message"] = "Image size is too large. It should be under 5 mb";
		        $records["success"] = false;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
		        exit;
	          }
            }



        $Users->mobile = trim($request->input('mobile'));
        $Users->stage_id = trim($request->input('stage_id'));
        $Users->country = trim($request->input('country'));
        $Users->city = trim($request->input('city'));
        $Users->website = trim($request->input('website'));
        $Users->legal_status = trim($request->input('legal_status'));
        $Users->profile_info = trim($request->input('profile_info'));

        //dd(Auth::user());
        //$Users->created_by = Auth::user()->id;

    	if( $Users->save() ) {
            $industry_idarr = $request->input('industry_id');
            // echo $industry_idarr;
            // exit;
            if(!empty($industry_idarr)){
            $industry_ids = explode(',', $industry_idarr);
             }
            if(!empty($industry_ids)){
                foreach($industry_ids as $ii){
                    $member_id = $Users->id;
                    $MemberBusiness = new MemberBusiness;
                    $MemberBusiness->industry_category_id = $ii;
                    $MemberBusiness->status = '1';
                    $MemberBusiness->member_id = $member_id;
                    $MemberBusiness->save();
                    }
                }
    		//return back()->with('msg_class', 'alert alert-success')->with('msg', 'New User Created Succesfully.');
            

        	$records["details"] = $Users;    
            $records["message"] = "successful";
	        $records["success"] = true;
	        $records["success_bool"] = 1;

	        echo json_encode($records);

	    	} 
	    	else {
	    		// return back()->with('msg_class', 'alert alert-danger')
	    		// ->with('msg', 'Something Went Wrong.');
	    		$records["details"] = array();
	    		$records["message"] = "Sorry! Something Went Wrong.";
		        $records["success"] = false;
		        $records["success_bool"] = 0;

		        echo json_encode($records);
	    	}
    	}
    }


    public function updateUser(Request $request) {
    	$records = array();
        $user_timestamp_id = $request->input('timestamp_id');
    	$User = Users::where('timestamp_id', '=', $user_timestamp_id)->first();



    	if( !empty($User) ) {


    		$email = trim($request->input('email_id'));

    		$UserWithEmail = Users::where('timestamp_id', '<>', $user_timestamp_id)->where('email_id', '=', $email)->first();

    		
    		if(!empty($UserWithEmail)){

    			$records["details"] = array();
		        $records["message"] = "Email already exist";
		        $records["success"] = false;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
		        exit;
    		}else{

            

    		$updateData = array();
    		if(!empty($request->input('member_company'))){
    		$updateData['member_company'] = trim($request->input('member_company'));
    		}
    		if(!empty($request->input('contact_name'))){
    		$updateData['contact_name'] = trim($request->input('contact_name'));
    		}
    		if(!empty($request->input('email_id'))){
    		$updateData['email_id'] = trim($request->input('email_id'));
    		}
    		if(!empty($request->input('contact_no'))){	
    		$updateData['contact_no'] = trim($request->input('contact_no'));
    		}
    		if(!empty($request->input('mobile'))){
    		$updateData['mobile'] = trim($request->input('mobile'));
    		}
    		if(!empty($request->input('stage_id'))){
    		$updateData['stage_id'] = trim($request->input('stage_id'));
    		}
    		if(!empty($request->input('country'))){
            $updateData['country'] = trim($request->input('country'));
        	}
        	if(!empty($request->input('city'))){
            $updateData['city'] = trim($request->input('city'));
        	}
        	if(!empty($request->input('website'))){
            $updateData['website'] = trim($request->input('website'));
        	}
        	if(!empty($request->input('legal_status'))){
            $updateData['legal_status'] = trim($request->input('legal_status'));
        	}
        	if(!empty($request->input('profile_info'))){
            $updateData['profile_info'] = trim($request->input('profile_info'));
        	}

            if(!empty($request->input('milestone'))){
            $updateData['milestone'] = trim($request->input('milestone'));
            }
            if(!empty($request->input('buisness_info'))){
            $updateData['buisness_info'] = trim($request->input('buisness_info'));
            }
            if(!empty($request->input('member_spec'))){
            $updateData['member_spec'] = trim($request->input('member_spec'));
            }
            if(!empty($request->input('member_looking'))){
            $updateData['member_looking'] = trim($request->input('member_looking'));
            }
            if(!empty($request->input('member_help'))){
            $updateData['member_help'] = trim($request->input('member_help'));
            }
            if(!empty($request->input('achievements'))){
            $updateData['achievements'] = trim($request->input('achievements'));
            }
            if(!empty($request->input('certifications'))){
            $updateData['certifications'] = trim($request->input('certifications'));
            }
            if(!empty($request->input('is_raised_invest'))){
              $updateData['is_raised_invest'] = trim($request->input('is_raised_invest'));

               if($updateData['invest_name']==1)
                {
                    $updateData['invest_name'] = trim($request->input('invest_name'));
                }
                else
                {
                    $updateData['invest_name'] = "";
                }
            }

            if(!empty($request->input('speech'))){
             $updateData['speech'] = trim($request->input('speech'));
            }

    		$updateData['updated_at'] = date('Y-m-d H:i:s');

    		if( $request->hasFile('image') ) {
                // echo 'hi...'; exit;
	    		$image = $request->file('image');
	    		$real_path = $image->getRealPath();
	            $file_orgname = $image->getClientOriginalName();
	            $file_size = $image->getClientSize();
	            $file_ext = strtolower($image->getClientOriginalExtension());
	            $file_newname = "user"."_".time().".".$file_ext;


	            if($file_size < (1048578*5)){
	            $destinationPath = public_path('/uploads/user_images');
	            $original_path = $destinationPath."/original";
	            $thumb_path = $destinationPath."/thumb";
	            
	            $img = Image::make($real_path);
	        	$img->resize(150, 150, function ($constraint) {
			    	$constraint->aspectRatio();
				})->save($thumb_path.'/'.$file_newname);

	        	$image->move($original_path, $file_newname);
	        	if(!empty($file_newname)){
	        	$updateData['image'] = $file_newname;
	        	}
	        		
	          }else{
	          	$records["details"] = array();
		        $records["message"] = "Image size is too large. It should be under 5 mb";
		        $records["success"] = false;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
		        exit;
	          }
	    	}
	    }



            //dd($updateData);
	    	$res = Users::where('timestamp_id', '=', $user_timestamp_id)->update($updateData);
	    	if( $res ) {

                $founder_name = $request->input('founder_name');
                $founder_profile = $request->input('founder_profile');

                $founder_img=$request->file('founder_img');

                //dd($founder_img);

                $founder_img_hidden=$request->input('founder_img_hidden');

                if(!empty($founder_name))
                {
                    if(!empty($founder_img_hidden)){

                        $count_hidden =count($founder_img_hidden);
                        $memberFounder = array();
                        foreach($founder_name as $key=>$v) {

                            
                            if(!empty($v))
                            {
                                $memberFounder[$key]['member_id'] = $Users->id;
                                $memberFounder[$key]['name'] = $v;
                                $memberFounder[$key]['profile'] = $founder_profile[$key];

                                //$key +=$count_hidden;

                                //echo $key;die;


                                if( isset($founder_img[$key]) ) {
                                    $image = $founder_img[$key];
                                    $real_path = $image->getRealPath();
                                    $file_orgname = $image->getClientOriginalName();
                                    $file_size = $image->getClientSize();
                                    $file_ext = strtolower($image->getClientOriginalExtension());
                                    $file_newname = "founder"."_".time().$key.".".$file_ext;
                                    $destinationPath = public_path('/uploads/founder_images');
                                    $original_path = $destinationPath."/original";
                                    $thumb_path = $destinationPath."/thumb";
                                    
                                    $img = Image::make($real_path);
                                    $img->resize(150, null, function ($constraint) {
                                        $constraint->aspectRatio();
                                    })->save($thumb_path.'/'.$file_newname);

                                    $image->move($original_path, $file_newname);
                                    $memberFounder[$key]['image'] = $file_newname;
                                }
                                else
                                {
                                    $file_newname =$founder_img_hidden[$key];
                                    $memberFounder[$key]['image'] = $file_newname;
                                }
                            }
                            
                        }

                        //dd($memberFounder);

                        
                        if (!empty($memberFounder)) {
                            FounderTransaction::where('member_id', '=', $UserID)->delete();
                            FounderTransaction::insert($memberFounder);
                        }
                    }
                    else
                    {
                        
                        $memberFounder = array();
                        foreach($founder_name as $key=>$v) {

                            if(!empty($v))
                            {
                            
                                $memberFounder[$key]['member_id'] = $Users->id;
                                $memberFounder[$key]['name'] = $v;
                                $memberFounder[$key]['profile'] = $founder_profile[$key];

                                //$key +=$count_hidden;

                                //echo $key;die;
                                if( $founder_img[$key] ) {
                                    $image = $founder_img[$key];
                                    $real_path = $image->getRealPath();
                                    $file_orgname = $image->getClientOriginalName();
                                    $file_size = $image->getClientSize();
                                    $file_ext = strtolower($image->getClientOriginalExtension());
                                    $file_newname = "founder"."_".time().$key.".".$file_ext;
                                    $destinationPath = public_path('/uploads/founder_images');
                                    $original_path = $destinationPath."/original";
                                    $thumb_path = $destinationPath."/thumb";
                                    
                                    $img = Image::make($real_path);
                                    $img->resize(150, null, function ($constraint) {
                                        $constraint->aspectRatio();
                                    })->save($thumb_path.'/'.$file_newname);

                                    $image->move($original_path, $file_newname);
                                    $memberFounder[$key]['image'] = $file_newname;
                                }
                            }
                        }

                        //dd($memberFounder);

                        
                        if (!empty($memberFounder)) {
                            FounderTransaction::where('member_id', '=', $UserID)->delete();
                            FounderTransaction::insert($memberFounder);
                        }
                    }
                }

                $buisness_img=$request->file('buisness_img');

                //dd($founder_img);

                $buisness_img_hidden=$request->input('buisness_img_hidden');

                $buisness_video=$request->input('buisness_video');

                //dd($buisness_video);
                //echo count($buisness_caption);die;
                if(count($buisness_caption))
                {
                    if(!empty($buisness_img_hidden)){

                        
                        $memberService = array();
                        foreach($buisness_caption as $key=>$v) {
                            //echo $v;die;
                            if(!empty($v))
                            {
                                //echo "1";die;
                                $memberService[$key]['member_id'] = $Users->id;
                                $memberService[$key]['caption'] = $v;
                                $memberService[$key]['buisness_video'] = $buisness_video[$key];
                                //$memberService[$key]['website'] = $buisness_website[$key];

                                //$key +=$count_hidden;

                                //echo $key;die;


                                if( isset($buisness_img[$key]) ) {
                                    $image = $buisness_img[$key];
                                    $real_path = $image->getRealPath();
                                    $file_orgname = $image->getClientOriginalName();
                                    $file_size = $image->getClientSize();
                                    $file_ext = strtolower($image->getClientOriginalExtension());
                                    $file_newname = "service"."_".time().$key.".".$file_ext;
                                    $destinationPath = public_path('/uploads/website_images');
                                    $original_path = $destinationPath."/original";
                                    $thumb_path = $destinationPath."/thumb";
                                    
                                    $img = Image::make($real_path);
                                    $img->resize(150, null, function ($constraint) {
                                        $constraint->aspectRatio();
                                    })->save($thumb_path.'/'.$file_newname);

                                    $image->move($original_path, $file_newname);
                                    $memberService[$key]['image'] = $file_newname;
                                }
                                else
                                {
                                    $file_newname =$buisness_img_hidden[$key];
                                    $memberService[$key]['image'] = $file_newname;
                                }
                            }
                            
                            
                        }

                        //dd($memberService);

                        
                        if (!empty($memberService)) {
                            MemberService::where('member_id', '=', $UserID)->delete();
                            MemberService::insert($memberService);
                        }
                    }
                    else
                    {
                        $memberService = array();
                        foreach($buisness_caption as $key=>$v) {

                            
                            if(!empty($v))
                            {
                                $memberService[$key]['member_id'] = $Users->id;
                                $memberService[$key]['caption'] = $v;
                                //$memberService[$key]['website'] = $buisness_website[$key];

                                //$key +=$count_hidden;

                                //echo $key;die;
                                if( $buisness_img[$key] ) {
                                    $image = $buisness_img[$key];
                                    $real_path = $image->getRealPath();
                                    $file_orgname = $image->getClientOriginalName();
                                    $file_size = $image->getClientSize();
                                    $file_ext = strtolower($image->getClientOriginalExtension());
                                    $file_newname = "service"."_".time().$key.".".$file_ext;
                                    $destinationPath = public_path('/uploads/website_images');
                                    $original_path = $destinationPath."/original";
                                    $thumb_path = $destinationPath."/thumb";
                                    
                                    $img = Image::make($real_path);
                                    $img->resize(150, null, function ($constraint) {
                                        $constraint->aspectRatio();
                                    })->save($thumb_path.'/'.$file_newname);

                                    $image->move($original_path, $file_newname);
                                    $memberService[$key]['image'] = $file_newname;
                                }
                            }
                        }

                        //dd($memberService);

                        
                        if (!empty($memberService)) {
                            MemberService::where('member_id', '=', $UserID)->delete();
                            MemberService::insert($memberService);
                        }
                    }
                }


                $industry_idarr = $request->input('industry_id');
                if(!empty($industry_idarr)){
                $industry_ids = explode(',', $industry_idarr);
                }
                if(!empty($industry_ids)){
                    MemberBusiness::where('member_id', '=', $User->id)->delete();
                    foreach($industry_ids as $ii){
                        $member_id = $User->id;
                        $MemberBusiness = new MemberBusiness;
                        $MemberBusiness->industry_category_id = $ii;
                        $MemberBusiness->status = '1';
                        $MemberBusiness->member_id = $member_id;
                        $MemberBusiness->save();
                        }
                    }

                $company_videoArr = $request->input('company_video');
                //dd($company_videoArr);

                if(!empty($company_videoArr)){
                    $memberVideo = array();
                    foreach($company_videoArr as $v1) {
                        $arr = array();

                        if(!empty($v1))
                        {
                            $arr['member_id'] = $Users->id;
                            $arr['company_video'] = $v1;
                            array_push($memberVideo, $arr);
                        }
                        
                    }
                    if (!empty($memberVideo)) {


                        /*if(count($memberVideo) >5)
                        {
                             return back()->with('msg', 'Five Company Video allo')->with('msg_class', 'alert alert-danger');
                        }*/
                        MemberVideo::where('member_id', '=', $UserID)->delete();
                        MemberVideo::insert($memberVideo);
                    }
                }

	    		$User = Users::where('timestamp_id', '=', $user_timestamp_id)->first();

		        $records["details"] = $User;
		        $records["message"] = "successful";
		        $records["success"] = true;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
	    	} else {
	    		$records["details"] = array();
		        $records["message"] = "Something Went Wrong.";
		        $records["success"] = false;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
	    	}
    	} else {
    			$records["details"] = array();
		        $records["message"] = "Porvidev user id is wrong";
		        $records["success"] = false;
		        $records["success_bool"] = 1;

		        echo json_encode($records);
    	}
    }

    public function userDetl(Request $request) {



    	$records = array();
    	$user_timestamp_id = $request->input('timestamp_id');
    	//$user = Users::where('timestamp_id', '=', $user_timestamp_id)->first();



    	$user = DB::table('users')
			->select('users.*','stage_name')
			 ->join('stage', 'users.stage_id', '=', 'stage.id')
			 ->where("status", "=", 1);	

        
		 
		if(!empty($user_timestamp_id)){
			$user = $user->where("timestamp_id", "=", $user_timestamp_id); 
		}
		
		$user = $user->orderBy('member_company', 'asc')->get()->first();
		//dd($user);
		$destinationPath = 'public/uploads/user_images/original/'; 
	    //$original_path = $destinationPath."/original";
	    //echo $original_path.$user->image;


	   	$memberBusiness= DB::table('member_business')
			->select('industry_category_id', 'industry_category','industry_category.id')
			 ->join('industry_category', 'member_business.industry_category_id', '=', 'industry_category.id')
			 ->where("industry_category.status", "=", 1)
			 ->where("member_id", "=", $user->id)->get();	

	   	//MemberBusiness::where('member_id', '=', $user->id)->get();
		// echo $user->id;	 
	 //   	dd($memberBusiness);


        $founders = DB::table('founder_transactions')->where('member_id', '=',$user->id)->orderBy('id', 'asc')->get();

        //dd($founders);


        if(count($founders))
        {
            foreach ($founders as $key1 => $value1) {

                //dd($value1->image);

                if($value1->image != '' && $value1->image != null) 
                {
                    //echo $value1->image;die;

                    //$image=$value1->image;

                    //dd($image);

                    $destinationPath2='public/uploads/founder_images/'; 
                    $founders[$key1]->image_url_thumb = $destinationPath2.'thumb/'.$value1->image;
                    $founders[$key1]->image_url_ori = $destinationPath2.'original/'.$value1->image;
                }
               
            }
        }
        


        $buisness = DB::table('member_services')->where('member_id', '=', $user->id)->orderBy('id', 'asc')->get();


        if(count($buisness))
        {
            foreach ($buisness as $key2 => $value2) {

                if($value2->image != '' && $value2->image != null) 
                {
                    $destinationPath1='public/uploads/website_images/'; 

                    $buisness[$key2]->image_url_thumb = $destinationPath1.'/thumb/'.$value2->image;
                    $buisness[$key2]->image_url_ori = $destinationPath1.'original/'.$value2->image;
                }
               
            }
        }


        $company_videos = DB::table('member_videos')->where('member_id', '=',$user->id)->orderBy('id', 'asc')->get();


		$user->image_with_path = $destinationPath.$user->image;
        $records["details"] = $user;
        $records['memberBusiness'] = $memberBusiness;
        $records['founders'] = $founders;
        $records['buisness'] = $buisness;
        $records['company_videos'] = $company_videos;
        //$records["image_path"] = $original_path;
        $records["message"] = "successful";
        $records["success"] = true;
        $records["success_bool"] = 1;
        //dd($records);


        echo json_encode($records);
    }

    public function addPost(Request $request){

    	$timestamp_id = $request->input('timestamp_id');
        #$post_id = $request->input('post_id'); 

        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
        $records = array();

        if(!empty($user->id)){
        	$Posts = new Posts;
        	$Posts->post_title = $request->input('post_title');
        	$Posts->post_info = $request->input('post_info');
        	$Posts->member_id = $user->id;
        	$Posts->post_type = $request->input('post_type'); //2=>private, 1=>public
        	$Posts->private_member_id = $request->input('assign_to');
        	$Posts->status = '1';

        	$Posts->save();
            // echo $Posts->id;
            // exit;
        	$industry_idarr = $request->input('industry_id');
                if(!empty($industry_idarr)){
                $industry_ids = explode(',', $industry_idarr);
                }
            if(!empty($industry_ids)){
                foreach($industry_ids as $ii){
                    $member_id = $user->id;
                    $PostIndustry = new PostIndustry;
                    $PostIndustry->industry_category_id = $ii;
                    $PostIndustry->status = '1';
                    $PostIndustry->post_id = $Posts->id;
                    $PostIndustry->save();
                    }
                }

            $category_idsArr = $request->input('category_id');
            if(!empty($category_idsArr)){
                $postCategory = array();
                foreach($category_idsArr as $v1) {
                    $arr = array();
                    $arr['post_id'] = $postID;
                    $arr['category_id'] = $v1;
                    array_push($postCategory, $arr);
                }
                //dd($postCategory);
                if (!empty($postCategory)) {
                    PostCategory::insert($postCategory);
                }
            }

        	$records["details"] = array();
	        $records["message"] = "Post Added successfully";
	        $records["success"] = true;
	        $records["success_bool"] = 1;

	        echo json_encode($records);

        }else{
        	$records["details"] = array();
	        $records["message"] = "User credentials does not match";
	        $records["success"] = false;
	        $records["success_bool"] = 1;

	        echo json_encode($records);	
        }	


    }


    public function editPost(Request $request){

    	$timestamp_id = $request->input('timestamp_id');
        $post_id = $request->input('post_id'); 

        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
        $post = Posts::where('id', '=', $post_id)->first();
        $postReply = PostReply::where('post_id', '=', $post_id)->first();

        if(!empty($user->id)){
        	if($post->member_id == $user->id){
        		if(empty($postReply)){
        			$editPosts = array();
        			if(!empty($request->input('post_title'))){
		        	$editPosts['post_title'] = $request->input('post_title');
		        	}
		        	if(!empty($request->input('post_info'))){
		        	$editPosts['post_info'] = $request->input('post_info');
		        	}

		        	if(!empty($request->input('post_type'))){
		        	$editPosts['post_type'] = $request->input('post_type'); //1=>private, 2=>public
		        	}
		        	if(!empty($request->input('assign_to'))){
		        	$editPosts['private_member_id']= $request->input('assign_to');
		        	}
		        	
		        	//dd($editPosts);
		        	$res = Posts::where('id', '=', $post_id)->update($editPosts);

                    if(!empty($request->input('industry_id'))){
		        	$industry_idarr = $request->input('industry_id');
                    if(!empty($industry_idarr)){
                    $industry_ids = explode(',', $industry_idarr);
                    }
	                if(!empty($industry_ids)){
	                    PostIndustry::where('post_id', '=', $post_id)->delete();
	                    foreach($industry_ids as $ii){
	                        $member_id = $user->id;
	                        $PostIndustry = new PostIndustry;
	                        $PostIndustry->industry_category_id = $ii;
	                        $PostIndustry->status = '1';
	                        $PostIndustry->post_id = $post_id;
	                        $PostIndustry->save();
	                        }
	                    }
		              }

                    if(!empty($request->input('industry_id')))
                    {
                        $category_idsArr = $request->input('category_id');
                        if(!empty($category_idsArr)){
                            $postCategory = array();
                            foreach($category_idsArr as $v1) {
                                $arr = array();
                                $arr['post_id'] = $postID;
                                $arr['category_id'] = $v1;
                                array_push($postCategory, $arr);
                            }
                            if (!empty($postCategory)) {
                                PostCategory::where('post_id', '=', $post_id)->delete();
                                PostCategory::insert($postCategory);
                            }
                        }
                    }

                    

		        	$post = Posts::where('id', '=', $post_id)->first();
		        	$records["details"] = $post;
			        $records["message"] = "Post Added successfully";
			        $records["success"] = true;
			        $records["success_bool"] = 1;

			        echo json_encode($records);
			    	}else{
			    		$records["details"] = array();
				        $records["message"] = "User cannot edit this post, already users comments on that";
				        $records["success"] = false;
				        $records["success_bool"] = 1;
				        echo json_encode($records);
			    	}
		    	}else{
		    	$records["details"] = array();
		        $records["message"] = "User cannot edit this post";
		        $records["success"] = false;
		        $records["success_bool"] = 1;
		        echo json_encode($records);
		    	}

        }else{
        	$records["details"] = array();
	        $records["message"] = "User credentials does not match";
	        $records["success"] = false;
	        $records["success_bool"] = 1;

	        echo json_encode($records);	
        }	


    }


    public function addReply(Request $request){

    	$timestamp_id = $request->input('timestamp_id');
        $post_id = $request->input('post_id'); 
        $post = Posts::where('id', '=', $post_id)->first();

        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
        $records = array();

        if(!empty($user->id) && (!empty($post->id))){
        	$PostReply = new PostReply;
        	$PostReply->post_id  = $post->id;
        	$PostReply->replied_on = '0';
        	$PostReply->replied_by = $user->id;
        	$PostReply->reply_text = $request->input('reply_text');


            if(!empty($request->input('video_url')))
            {
                $PostReply->video_url = $request->input('video_url');
            }

            

        	$PostReply->status = '1';

        	$PostReply->save();

            //post image upload
            $files=$request->file('image');

            if($request->hasFile('image'))
            {
                
                foreach ($files as $key =>$image) {

                    $real_path = $image->getRealPath();
                    $file_orgname = $image->getClientOriginalName();
                    $file_size = $image->getClientSize();
                    $file_ext = strtolower($image->getClientOriginalExtension());
                    $file_newname = "post"."_".time().$key."_".$PostReply->id.'.'.$file_ext;;
                    $destinationPath = public_path('/uploads/posts');
                    $original_path = $destinationPath."/images";
                   
                    $img = Image::make($real_path);
                   
                    $image->move($original_path, $file_newname);
                    $PostMedia = new PostMedia;
                    $PostMedia->post_reply_id = $PostReply->id;
                    $PostMedia->media_path = $file_newname;
                    $PostMedia->media_type = 'I';
                    $PostMedia->save();

                }

            }

            //post image end

            //post video upload



            

           
            /*$files_video=$request->file('video');

            if(!is_null($files_video))
            {
                $file_ext_video = strtolower($files_video->getClientOriginalExtension());
            
                $file_newname_video = "post"."_".time()."_".$PostReply->id.'.'.$file_ext_video;
                $destinationPath = public_path('/uploads/posts/videos');
               
                $files_video->move($destinationPath, $file_newname_video);
                $PostMedia = new PostMedia;
                $PostMedia->post_reply_id = $PostReply->id;
                $PostMedia->media_path = $file_newname_video;
                $PostMedia->media_type = 'V';
                $PostMedia->save();
            }*/
        	$records["details"] = array();
	        $records["message"] = "Post Comments Added Successfully";
	        $records["success"] = true;
	        $records["success_bool"] = 1;

	        echo json_encode($records);

        }else{
        	$records["details"] = array();
	        $records["message"] = "User Credentials or Post does not match";
	        $records["success"] = false;
	        $records["success_bool"] = 1;

	        echo json_encode($records);	
        }	
    }


    public function addReplyofReply(Request $request){

        $timestamp_id = $request->input('timestamp_id');
        $comment_id = $request->input('comment_id'); 
        $comment = PostReply::where('id', '=', $comment_id)->first();

        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
        $records = array();

        if(!empty($user->id) && (!empty($comment->id))){
            $PostReply = new PostReply;
            $PostReply->post_id  = $comment->post_id;
            $PostReply->replied_on = $comment->id;
            $PostReply->replied_by = $user->id;
            $PostReply->reply_text = $comment->reply_text;
            
            $PostReply->reply_text = $request->input('reply_text');

            if(!empty($request->input('video_url')))
            {
                $PostReply->video_url = $request->input('video_url');
            }

            $PostReply->status = '1';

            $PostReply->save();

            //post image upload
            $files=$request->file('image');

            if($request->hasFile('image'))
            {
                
                foreach ($files as $key =>$image) {

                    $real_path = $image->getRealPath();
                    $file_orgname = $image->getClientOriginalName();
                    $file_size = $image->getClientSize();
                    $file_ext = strtolower($image->getClientOriginalExtension());
                    $file_newname = "post"."_".time().$key."_".$PostReply->id.'.'.$file_ext;;
                    $destinationPath = public_path('/uploads/posts');
                    $original_path = $destinationPath."/images";
                   
                    $img = Image::make($real_path);
                   
                    $image->move($original_path, $file_newname);
                    $PostMedia = new PostMedia;
                    $PostMedia->post_reply_id = $PostReply->id;
                    $PostMedia->media_path = $file_newname;
                    $PostMedia->media_type = 'I';
                    $PostMedia->save();

                }

            }

            //post image end

            //post video upload
            

           
            /*$files_video=$request->file('video');

            if(!is_null($files_video))
            {
                $file_ext_video = strtolower($files_video->getClientOriginalExtension());
            
                $file_newname_video = "post"."_".time()."_".$PostReply->id.'.'.$file_ext_video;
                $destinationPath = public_path('/uploads/posts/videos');
               
                $files_video->move($destinationPath, $file_newname_video);
                $PostMedia = new PostMedia;
                $PostMedia->post_reply_id = $PostReply->id;
                $PostMedia->media_path = $file_newname_video;
                $PostMedia->media_type = 'V';
                $PostMedia->save();
            }*/
            $records["details"] = array();
            $records["message"] = "Comment Reply Added Successfully";
            $records["success"] = true;
            $records["success_bool"] = 1;

            echo json_encode($records);

        }else{
            $records["details"] = array();
            $records["message"] = "User Credentials or Post does not match";
            $records["success"] = false;
            $records["success_bool"] = 1;

            echo json_encode($records); 
        }   
    }


    public function editReply(Request $request){

    	$timestamp_id = $request->input('timestamp_id');
        $post_id = $request->input('post_id'); 
        $post_reply_id = $request->input('post_reply_id'); 
        $post = Posts::where('id', '=', $post_id)->first();
        $postReply = PostReply::where('replied_on', '=', $post_reply_id)->first();

        $user = Users::where('timestamp_id', '=', $timestamp_id)->first();
        $records = array();

        if(!empty($user->id) && (!empty($post->id))){
        	if(empty($postReply)){
        	// $PostReply = new PostReply;
        	// $PostReply->post_id  = $post->id;
        	// $PostReply->replied_on = '0';
        	// $PostReply->replied_by = $user->id;
        	// $PostReply->reply_text = $request->input('reply_text');
        	// $PostReply->status = '1';

        	
        	$editPosts['reply_text'] = $request->input('reply_text');



        	$res = PostReply::where('id', '=', $post_reply_id)->update($editPosts);
        	$records["details"] = array();
	        $records["message"] = "Post Comments Edited Successfully";
	        $records["success"] = true;
	        $records["success_bool"] = 1;

	        echo json_encode($records);
	    	}else{
	    	$records["details"] = array();
	        $records["message"] = "Post Comment is not editable, already someone roplied on that";
	        $records["success"] = false;
	        $records["success_bool"] = 1;
	    	}

        }else{
        	$records["details"] = array();
	        $records["message"] = "User Credentials or Post data does not match";
	        $records["success"] = false;
	        $records["success_bool"] = 1;

	        echo json_encode($records);	
        }	
    }



}
